// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TreasureIslandXSceneKit
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import TreasureIslandXFoundationKit
@_exported import TreasureIslandXSceneKit
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class LauncherKit {
  public class Builder {
    public init()
    public func withHeader(headerModel: TreasureIslandXSceneKit.SceneHeaderModel) -> Self
    public func withAdvertisingId(advertisingId: Swift.String) -> Self
    public func build() -> TreasureIslandXSceneKit.LauncherKit
    @objc deinit
  }
  public func launch(completionHandler: @escaping (_ success: Swift.Bool, _ message: Swift.String) -> Swift.Void)
  public func launchWithViewController(_ rootViewController: UIKit.UIViewController, completionHandler: @escaping (_ success: Swift.Bool, _ message: Swift.String) -> Swift.Void)
  public func launchNotification()
  public func launchNotificationSetting()
  public func testLaunchWebContrator(filePath: Swift.String)
  @objc deinit
}
public struct Profile {
  public enum Gender {
    case male, female
    public static func == (a: TreasureIslandXSceneKit.Profile.Gender, b: TreasureIslandXSceneKit.Profile.Gender) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public class Builder {
    public init(signKey: Swift.String)
    public func withGender(gender: TreasureIslandXSceneKit.Profile.Gender?) -> TreasureIslandXSceneKit.Profile.Builder
    public func withBirthYear(birthYear: Swift.Int?) -> TreasureIslandXSceneKit.Profile.Builder
    public func register(completionHandler: @escaping (_ success: Swift.Bool, _ message: Swift.String) -> Swift.Void)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class SceneHeaderModel {
  public class CustomBuilder {
    public init()
    public func withView(_ view: TreasureIslandXSceneKit.UIViewSceneHeader) -> Self
    public func build() -> TreasureIslandXSceneKit.SceneHeaderModel
    @objc deinit
  }
  public class PresetBuilder {
    public init()
    public func withTitle(_ title: Swift.String) -> Self
    public func withUseBackButton(_ use: Swift.Bool) -> Self
    public func withUseCloseButton(_ use: Swift.Bool) -> Self
    public func build() -> TreasureIslandXSceneKit.SceneHeaderModel
    @objc deinit
  }
  @objc deinit
}
public struct SceneKit {
  public static var isInit: Swift.Bool {
    get
  }
  public enum Environment {
    case develop, test, live
    public static func == (a: TreasureIslandXSceneKit.SceneKit.Environment, b: TreasureIslandXSceneKit.SceneKit.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Membership {
    case basic, channeling
    public static func == (a: TreasureIslandXSceneKit.SceneKit.Membership, b: TreasureIslandXSceneKit.SceneKit.Membership) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public class Builder {
    public init(appId: Swift.String, appSecret: Swift.String, membership: TreasureIslandXSceneKit.SceneKit.Membership)
    public func withAllowLog(allow: Swift.Bool) -> Self
    public func withEnvironment(environment: TreasureIslandXSceneKit.SceneKit.Environment) -> Self
    public func build() -> TreasureIslandXSceneKit.SceneKit
    @objc deinit
  }
  public func initialize()
}
public struct ContentsKit {
  public static func recommendationContentModel(signKey: Swift.String, adid: Swift.String? = nil, isAdult: Swift.Bool? = nil, completionHandler: @escaping (TreasureIslandXSceneKit.ContentsKit.ContentDataResult<[TreasureIslandXFoundationKit.RecommendationContentData]>) -> Swift.Void)
  public static func recommendationContentText(signKey: Swift.String, adid: Swift.String? = nil, isAdult: Swift.Bool? = nil, completionHandler: @escaping (TreasureIslandXSceneKit.ContentsKit.ContentDataResult<Swift.String>) -> Swift.Void)
  public static func recentContentModel(signKey: Swift.String, completionHandler: @escaping (TreasureIslandXSceneKit.ContentsKit.ContentDataResult<[TreasureIslandXFoundationKit.RecentContentData]>) -> Swift.Void)
  public static func recentContentText(signKey: Swift.String, completionHandler: @escaping (TreasureIslandXSceneKit.ContentsKit.ContentDataResult<Swift.String>) -> Swift.Void)
  public enum ContentDataResult<T> {
    case success(T)
    case failure(status: Swift.Int, message: Swift.String)
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class UIViewSceneHeader : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var sceneUIViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var sceneWebView: WebKit.WKWebView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TreasureIslandXSceneKit.Profile.Gender : Swift.Equatable {}
extension TreasureIslandXSceneKit.Profile.Gender : Swift.Hashable {}
extension TreasureIslandXSceneKit.SceneKit.Environment : Swift.Equatable {}
extension TreasureIslandXSceneKit.SceneKit.Environment : Swift.Hashable {}
extension TreasureIslandXSceneKit.SceneKit.Membership : Swift.Equatable {}
extension TreasureIslandXSceneKit.SceneKit.Membership : Swift.Hashable {}
